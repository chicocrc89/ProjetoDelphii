unit uDaoVeiculos;

interface

uses udao, uveiculos, uDM, DB, uDaoModelos, SysUtils, uDaoCores, uDaoCombustiveis;

type
  Daoveiculos = class(dao)
  private

  protected
    umdm: TDM;
    umadaomodelo: DaoModelos;
    umadaocor : DaoCores;
    umadaocombustivel : DaoCombustiveis;
  public
    constructor CrieObj;
    destructor Destrua_se;
    function Salvar(pObj: TObject): string; override;
    function Carregar(pObj: TObject): string; override;
    function Excluir(pObj: TObject): string; override;
    function Pesquisar(pChave: string): string; override;
    procedure setDM(pDM: TDM);
    function getds: Tdatasource;
    procedure setdaomodelo(pObj: TObject);
    procedure setdaocor(pObj: TObject);
    procedure setdaocombustivel(pObj: TObject);
  end;

implementation

{ Daoveiculos }

function Daoveiculos.Carregar(pObj: TObject): string;
var
  mveiculos: veiculos;
begin
  mveiculos := veiculos(pObj);
  if not umdm.trans.Active then
    umdm.trans.Active := true;
  if not umdm.dsetveiculo.Active then
    umdm.dsetveiculo.Open;
  mveiculos.setCodigo(umdm.dsetveiculoID_veiculo.Value);
  mveiculos.getummodelo.setCodigo(umdm.dsetveiculoID_MODELO.Value);
  mveiculos.setchassi(umdm.dsetveiculoCHASSI.Value);
  mveiculos.setplaca(umdm.dsetveiculoPLACA.Value);
  mveiculos.setano(umdm.dsetveiculoANO.Value);
  mveiculos.getumacor.setcodigo(umdm.dsetveiculoID_COR.Value);
  mveiculos.getumcombustivel.setCodigo(umdm.dsetveiculoID_COMBUSTIVEL.Value);
  mveiculos.setquilometragem(umdm.dsetveiculoQUILOMETRAGEM.Value);
  mveiculos.setCadastro(umdm.dsetveiculoDATA_CADASTRO.Value);
  mveiculos.setUlt_Alt(umdm.dsetveiculoULTIMA_ALTERACAO.Value);
end;

constructor Daoveiculos.CrieObj;
begin
  umadaomodelo := DaoModelos.CrieObj;
end;

destructor Daoveiculos.Destrua_se;
begin
  umadaomodelo.Destrua_se;
end;

function Daoveiculos.Excluir(pObj: TObject): string;
begin
  if not umdm.trans.Active then
    umdm.trans.Active := true;
  if not umdm.dsetveiculo.Active then
    umdm.dsetveiculo.Open;
  umdm.dsetveiculo.Delete;
  umdm.trans.Commit;
end;

function Daoveiculos.getds: Tdatasource;
begin
  result := umdm.dsveiculo;
end;

function Daoveiculos.Pesquisar(pChave: string): string;
var
  mSQL: string;
begin
  if length(pChave) = 0 then
    mSQL := 'select * from veiculo'
  else if ehnumero(pChave) then
    mSQL := 'select * from veiculo where id_veiculo =' + QuotedStr(pChave)
  else
    mSQL := 'select * from veiculo ='
      + QuotedStr(pChave);
  umdm.dsetveiculo.Active := false;
  umdm.dsetveiculo.SelectSQL.Text := mSQL;
  if not umdm.trans.Active then
    umdm.trans.Active := true;
  if not umdm.dsetveiculo.Active then
    umdm.dsetveiculo.Open;
  result := '';
end;

function Daoveiculos.Salvar(pObj: TObject): string;
var
  mveiculos: veiculos;
  mdata : Tdate;
begin
  mveiculos := veiculos(pObj);
  if not umdm.trans.Active then
    umdm.trans.Active := true;
  if not umdm.dsetveiculo.Active then
    umdm.dsetveiculo.Open;
  if mveiculos.getcodigo = 0 then
    umdm.dsetveiculo.Insert
  else
  begin
    umdm.dsetveiculo.Edit;
    mdata := now
  end;
  umdm.dsetveiculoID_veiculo.Value := mveiculos.getcodigo;
  umdm.dsetveiculoID_MODELO.Value := mveiculos.getummodelo.getcodigo;
  umdm.dsetveiculoCHASSI.Value := mveiculos.getchassi;
  umdm.dsetveiculoPLACA.Value := mveiculos.getplaca;
  umdm.dsetveiculoANO.Value := mveiculos.getano;
  umdm.dsetveiculoID_COR.Value := mveiculos.getumacor.getcodigo;
  umdm.dsetveiculoID_COMBUSTIVEL.Value := mveiculos.getumcombustivel.getCodigo;
  umdm.dsetveiculoQUILOMETRAGEM.Value := mveiculos.getquilometragem;
  umdm.dsetveiculoDATA_CADASTRO.Value := mveiculos.getCadastro;
  umdm.dsetveiculoULTIMA_ALTERACAO.Value := mdata;
  umdm.dsetveiculo.Post;
  umdm.trans.Commit;

end;

procedure Daoveiculos.setdaocombustivel(pObj: TObject);
begin
  umadaocombustivel := DaoCombustiveis(pObj);
end;

procedure Daoveiculos.setdaocor(pObj: TObject);
begin
  umaDaoCor := DaoCores(pObj);
end;

procedure Daoveiculos.setdaomodelo(pObj: TObject);
begin
  umadaomodelo := DaoModelos(pObj);
end;

procedure Daoveiculos.setDM(pDM: TDM);
begin
  umdm := pDM;
end;

end.

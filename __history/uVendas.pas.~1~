unit uVendas;

interface
  uses uGenerica, uclientes, uCondicoes, ucolecaoprodutos, uProdutos, uColecaoContasreceber,
  uFormaPagamentos, uServicos, ucolecaoservicos;
  type vendas = class(generica)
  private

  protected
    numero_nota :integer;
    serie: string;
    modelo: string;
    status: string ;
    data_venda: TDate;
    data_emissao: TDate;
    umcliente: clientes;
    umacondicao: Condicoes;
    totaldesconto: Currency;
    datacancelamento: TDate;
    totalvenda: Currency;
    totalprodutos: Currency;
    totalservicos: Currency;
    umacolecaoproduto: Colecaoprodutos;
    umacolecaoservico: Colecaoservicos;
    umproduto : Produtos;
    umservico : Servicos;
    umacolecaocontasreceber : ColecaoContasReceber;
    umaformapagamento : FormaPagamentos;
  public
    constructor Crieobj;
    destructor Destrua_se;
    procedure setNumero_nota(pNumero_nota:integer);
    function  getNumero_nota:integer;
    procedure setSerie (pSerie:string);
    function  getSerie :string;
    procedure setModelo (pModelo: string);
    function  getModelo : string;
    procedure setStatus (pStatus:string);
    function  getStatus:string;
    procedure setData_entrada (pData_entrada:TDate);
    function  getData_entrada : TDate;
    procedure setData_emissao (pData_emissao:TDate);
    function  getData_emissao:TDate;
    procedure setumcliente(pcliente:clientes);
    function  Getumcliente :clientes;
    procedure setumaCondicao(pCondicao:Condicoes);
    function  getumaCondicao: Condicoes;
    procedure setTotaldesconto (pTotaldesconto:Currency);
    function  getTotaldesconto :Currency;
    procedure setValor_frete (pValor_frete:Currency);
    function  getValor_frete :Currency;
    procedure setseguro (pseguro:real);
    function  getseguro : real;
    procedure setdatacancelamento(pdatacancelamento : TDate);
    function  getDatacancelamento :TDate;
    procedure setTotalcompra (pTotalcompra:Currency);
    function  getTotalcompra :Currency;
    procedure setTotalprodutos (pTotalproduto:Currency);
    function  getTotalprodutos  :Currency;
    procedure setValoroutrasdespesas(pValoroutrasdespesas:Currency);
    function  getValoroutrasdespesas:Currency;
    procedure setumacolecaoproduto(pcolecaoproduto : Colecaoprodutos);
    function  getumacolecaoproduto : Colecaoprodutos;
    procedure setumproduto (pproduto : produtos);
    function getumproduto : produtos;
    procedure setumacolecaocontaspagar(pcolecaocontaspagar : ColecaoContasPagar);
    function getumacolecaocontaspagar : ColecaoContasPagar;
    procedure setumaformapagamento(pformapagamento : FormaPagamentos);
    function getumaformapagamento : FormaPagamentos;
    function clone : vendas;
  end;

implementation

{ vendas }

function vendas.clone: vendas;
begin
  result := vendas.Crieobj;
  result.setNumero_nota(numero_nota);
  result.setSerie(serie);
  result.setModelo(modelo);
  result.setStatus(status);
  result.setData_entrada(data_entrada);
  result.setData_emissao(data_emissao);
  result.setumcliente(umcliente);
  result.setumaCondicao(umacondicao);
  result.setTotaldesconto(totaldesconto);
  result.setValor_frete(valor_frete);
  result.setseguro(seguro);
  result.setdatacancelamento(datacancelamento);
  result.setTotalcompra(totalcompra);
  result.setTotalprodutos(totalprodutos);
  result.setValoroutrasdespesas(valoroutrasdespesas);
  result.setumacolecaoproduto(umacolecaoproduto);
  result.setumacolecaocontaspagar(umacolecaocontaspagar);
  result.setumaformapagamento(umaformapagamento);
  result.setCadastro(cadastro);
  result.setUlt_Alt(ult_alt);
end;

constructor vendas.Crieobj;
begin
  umcliente := clientes.Crieobj;
  umacolecaoproduto := ColecaoProdutos.crieObj;
  umacondicao := Condicoes.crieobj;
  umproduto := Produtos.Crieobj;
  umacolecaoContaspagar := ColecaoContasPagar.crieObj;
  umaformapagamento := FormaPagamentos.Crieobj;

end;

destructor vendas.Destrua_se;
begin
  umcliente.Destrua_se;
  umacolecaoproduto.destrua_se;
  umacondicao.destrua_se;
  umproduto.Destrua_se;
  umaColecaocontaspagar.destrua_se;
  umaformapagamento.Destrua_se;
end;

function vendas.getDatacancelamento: TDate;
begin
  result := datacancelamento;
end;

function vendas.getData_emissao: TDate;
begin
  result := data_emissao;
end;

function vendas.getData_entrada: TDate;
begin
  result := data_entrada;
end;

function vendas.getseguro: real;
begin
  result := seguro;
end;

function vendas.getModelo: string;
begin
  result := modelo;
end;

function vendas.getNumero_nota: integer;
begin
  result := numero_nota;
end;

function vendas.getSerie: string;
begin
  result := serie;
end;

function vendas.getStatus: string;
begin
  result := status;
end;

function vendas.getTotalcompra: Currency;
begin
  result := totalcompra;
end;

function vendas.getTotaldesconto: Currency;
begin
  result := totaldesconto;
end;

function vendas.getTotalprodutos: Currency;
begin
  result := totalprodutos;
end;

function vendas.getumacolecaocontaspagar: ColecaoContasPagar;
begin
  result := umacolecaocontaspagar;
end;

function vendas.getumacolecaoproduto: Colecaoprodutos;
begin
  result := umacolecaoproduto;
end;

function vendas.getumaCondicao: Condicoes;
begin
  result := umacondicao;
end;

function vendas.getumaformapagamento: FormaPagamentos;
begin
  result := umaformapagamento;
end;

function vendas.Getumcliente: clientes;
begin
  result := umcliente;
end;

function vendas.getumproduto: produtos;
begin
  result := umproduto;
end;

function vendas.getValoroutrasdespesas: Currency;
begin
  result := valoroutrasdespesas;
end;

function vendas.getValor_frete: Currency;
begin
  result := valor_frete;
end;

procedure vendas.setdatacancelamento(pdatacancelamento: TDate);
begin
  datacancelamento := pdatacancelamento;
end;

procedure vendas.setData_emissao(pData_emissao: TDate);
begin
  data_emissao := pdata_emissao;
end;

procedure vendas.setData_entrada(pData_entrada: TDate);
begin
  data_entrada := pdata_entrada;
end;

procedure vendas.setseguro(pseguro: real);
begin
  seguro := pseguro;
end;

procedure vendas.setModelo(pModelo: string);
begin
  modelo := pmodelo;
end;

procedure vendas.setNumero_nota(pNumero_nota: integer);
begin
  numero_nota := pnumero_nota;
end;

procedure vendas.setSerie(pSerie: string);
begin
  serie := pserie;
end;

procedure vendas.setStatus(pStatus: string);
begin
  status := pstatus;
end;

procedure vendas.setTotalcompra(pTotalcompra: Currency);
begin
  totalcompra := ptotalcompra;
end;

procedure vendas.setTotaldesconto(pTotaldesconto: Currency);
begin
  totaldesconto := ptotaldesconto;
end;

procedure vendas.setTotalprodutos(pTotalproduto: Currency);
begin
  totalprodutos := ptotalproduto;
end;

procedure vendas.setumacolecaocontaspagar(pcolecaocontaspagar: ColecaoContasPagar);
begin
  umacolecaocontaspagar := pcolecaocontaspagar;
end;

procedure vendas.setumacolecaoproduto(pcolecaoproduto: Colecaoprodutos);
begin
  umacolecaoproduto := pcolecaoproduto;
end;

procedure vendas.setumaCondicao(pCondicao: Condicoes);
begin
  umacondicao := pcondicao;
end;

procedure vendas.setumaformapagamento(pformapagamento: FormaPagamentos);
begin
  umaformapagamento := pformapagamento;
end;

procedure vendas.setumcliente(pcliente: clientes);
begin
  umcliente := pcliente;
end;

procedure vendas.setumproduto(pproduto: produtos);
begin
  umproduto := pproduto;
end;

procedure vendas.setValoroutrasdespesas(pValoroutrasdespesas: Currency);
begin
  valoroutrasdespesas := pvaloroutrasdespesas;
end;

procedure vendas.setValor_frete(pValor_frete: Currency);
begin
  valor_frete := pvalor_frete;
end;

end.

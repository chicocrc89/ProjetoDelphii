unit ucondicoes;

interface
  uses ugenerica, uColecaoParcelas, uParcelas;
  type Condicoes = class(generica)
  private

  protected
    condicao    : string;
    parcelas    : integer;
    juros       : real;
    umacolecaop : ColecaoParcelas;
    umaparcela : Parcelas;
  public
    constructor crieobj;
    destructor destrua_se;
    procedure setcondicao (pcondicao: string);
    procedure setparcelas (pparcelas : integer);
    procedure setumacolecaop (pcolecao : ColecaoParcelas);
    procedure setumaparcela  (pumaparcela : Parcelas);
    function getumacolecaop : ColecaoParcelas;
    function getcondicao : string;
    function getparcelas : integer;
    function getumaparcela : Parcelas;
    function clone : condicoes;
  end;

implementation

{ Condicoes }

function Condicoes.clone: condicoes;
begin
  result := condicoes.crieobj;
  result.setCodigo(codigo);
  result.setcondicao(condicao);
  result.setparcelas(parcelas);
  result.setumaparcela(umaparcela);
  result.setumacolecaop(umacolecaop);
end;

constructor Condicoes.crieobj;
begin
  umacolecaop := ColecaoParcelas.crieObj;
end;

destructor Condicoes.destrua_se;
begin
  umacolecaop.destrua_se;
end;

function Condicoes.getcondicao: string;
begin
  result := condicao;
end;

function Condicoes.getparcelas: integer;
begin
  result := parcelas;
end;

function Condicoes.getumacolecaop: ColecaoParcelas;
begin
  result := umacolecaop;
end;

function Condicoes.getumaparcela: Parcelas;
begin
  result := umaparcela;
end;

procedure Condicoes.setcondicao(pcondicao: string);
begin
  condicao := pcondicao;
end;

procedure Condicoes.setparcelas(pparcelas: integer);
begin
  parcelas := pparcelas;
end;

procedure Condicoes.setumacolecaop(pcolecao: ColecaoParcelas);
begin
  umacolecaop := pcolecao;
end;

procedure Condicoes.setumaparcela(pumaparcela: Parcelas);
begin
  umaparcela := pumaparcela;
end;

end.
